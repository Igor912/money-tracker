"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rx = require("rxjs/Rx");
var CostService = (function () {
    function CostService() {
        this.costs = new Array({ id: 0, quantity: 310, type: "Products" }, { id: 1, quantity: 25, type: "Products" }, { id: 2, quantity: 127, type: "ForHome" }, { id: 3, quantity: 80, type: "Products" }, { id: 4, quantity: 32, type: "Products" }, { id: 5, quantity: 235, type: "Products" }, { id: 6, quantity: 98, type: "ForHome" }, { id: 7, quantity: 105, type: "Products" }, { id: 8, quantity: 80, type: "Products" }, { id: 9, quantity: 75, type: "Products" }, { id: 10, quantity: 235, type: "Products" }, { id: 11, quantity: 264, type: "ForHome" }, { id: 12, quantity: 78, type: "Products" });
        this.costsListSource = new Rx.BehaviorSubject(this.costs);
        this.backing_costsListObservable = this.costsListSource.asObservable();
    }
    Object.defineProperty(CostService.prototype, "costsListObservable", {
        get: function () {
            return this.backing_costsListObservable;
        },
        enumerable: true,
        configurable: true
    });
    CostService.prototype.getCost = function (id) {
        return this.costsListSource.getValue().filter(function (cost) { return cost.id === id; })[0];
    };
    CostService.prototype.addCost = function (newCost) {
        var activeCosts = this.costsListSource.getValue();
        activeCosts.push(newCost);
        this.costsListSource.next(activeCosts);
    };
    return CostService;
}());
CostService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], CostService);
exports.CostService = CostService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29zdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLDRCQUE4QjtBQUs5QixJQUFhLFdBQVc7SUFJcEI7UUFLUSxVQUFLLEdBQUcsSUFBSSxLQUFLLENBQ3JCLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFDMUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUN6QyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQ3pDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFDekMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUN6QyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQzFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFDeEMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUMxQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQ3pDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFDekMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUMzQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQzFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FDN0MsQ0FBQztRQWxCRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0UsQ0FBQztJQWtCRCxzQkFBVyw0Q0FBbUI7YUFBOUI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDO1FBQzVDLENBQUM7OztPQUFBO0lBRUQsNkJBQU8sR0FBUCxVQUFRLEVBQVU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBZCxDQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsNkJBQU8sR0FBUCxVQUFRLE9BQWE7UUFDakIsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsRCxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDTCxrQkFBQztBQUFELENBQUMsQUF0Q0QsSUFzQ0M7QUF0Q1ksV0FBVztJQUR2QixpQkFBVSxFQUFFOztHQUNBLFdBQVcsQ0FzQ3ZCO0FBdENZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgKiBhcyBSeCBmcm9tIFwicnhqcy9SeFwiO1xuXG5pbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4vY29zdFwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29zdFNlcnZpY2Uge1xuICAgIHByaXZhdGUgY29zdHNMaXN0U291cmNlOiBSeC5CZWhhdmlvclN1YmplY3Q8Q29zdFtdPjtcbiAgICBwcml2YXRlIGJhY2tpbmdfY29zdHNMaXN0T2JzZXJ2YWJsZTogUnguT2JzZXJ2YWJsZTxDb3N0W10+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29zdHNMaXN0U291cmNlID0gbmV3IFJ4LkJlaGF2aW9yU3ViamVjdDxDb3N0W10+KHRoaXMuY29zdHMpO1xuICAgICAgICB0aGlzLmJhY2tpbmdfY29zdHNMaXN0T2JzZXJ2YWJsZSA9IHRoaXMuY29zdHNMaXN0U291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29zdHMgPSBuZXcgQXJyYXk8Q29zdD4oXG4gICAgICAgIHsgaWQ6IDAsIHF1YW50aXR5OiAzMTAsIHR5cGU6IFwiUHJvZHVjdHNcIiB9LFxuICAgICAgICB7IGlkOiAxLCBxdWFudGl0eTogMjUsIHR5cGU6IFwiUHJvZHVjdHNcIiB9LFxuICAgICAgICB7IGlkOiAyLCBxdWFudGl0eTogMTI3LCB0eXBlOiBcIkZvckhvbWVcIiB9LFxuICAgICAgICB7IGlkOiAzLCBxdWFudGl0eTogODAsIHR5cGU6IFwiUHJvZHVjdHNcIiB9LFxuICAgICAgICB7IGlkOiA0LCBxdWFudGl0eTogMzIsIHR5cGU6IFwiUHJvZHVjdHNcIiB9LFxuICAgICAgICB7IGlkOiA1LCBxdWFudGl0eTogMjM1LCB0eXBlOiBcIlByb2R1Y3RzXCIgfSxcbiAgICAgICAgeyBpZDogNiwgcXVhbnRpdHk6IDk4LCB0eXBlOiBcIkZvckhvbWVcIiB9LFxuICAgICAgICB7IGlkOiA3LCBxdWFudGl0eTogMTA1LCB0eXBlOiBcIlByb2R1Y3RzXCIgfSxcbiAgICAgICAgeyBpZDogOCwgcXVhbnRpdHk6IDgwLCB0eXBlOiBcIlByb2R1Y3RzXCIgfSxcbiAgICAgICAgeyBpZDogOSwgcXVhbnRpdHk6IDc1LCB0eXBlOiBcIlByb2R1Y3RzXCIgfSxcbiAgICAgICAgeyBpZDogMTAsIHF1YW50aXR5OiAyMzUsIHR5cGU6IFwiUHJvZHVjdHNcIiB9LFxuICAgICAgICB7IGlkOiAxMSwgcXVhbnRpdHk6IDI2NCwgdHlwZTogXCJGb3JIb21lXCIgfSxcbiAgICAgICAgeyBpZDogMTIsIHF1YW50aXR5OiA3OCwgdHlwZTogXCJQcm9kdWN0c1wiIH1cbiAgICApO1xuXG4gICAgcHVibGljIGdldCBjb3N0c0xpc3RPYnNlcnZhYmxlKCk6IFJ4Lk9ic2VydmFibGU8Q29zdFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhY2tpbmdfY29zdHNMaXN0T2JzZXJ2YWJsZTtcbiAgICB9XG5cbiAgICBnZXRDb3N0KGlkOiBudW1iZXIpOiBDb3N0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29zdHNMaXN0U291cmNlLmdldFZhbHVlKCkuZmlsdGVyKGNvc3QgPT4gY29zdC5pZCA9PT0gaWQpWzBdO1xuICAgIH1cblxuICAgIGFkZENvc3QobmV3Q29zdDogQ29zdCkge1xuICAgICAgICBsZXQgYWN0aXZlQ29zdHMgPSB0aGlzLmNvc3RzTGlzdFNvdXJjZS5nZXRWYWx1ZSgpO1xuICAgICAgICBhY3RpdmVDb3N0cy5wdXNoKG5ld0Nvc3QpO1xuICAgICAgICB0aGlzLmNvc3RzTGlzdFNvdXJjZS5uZXh0KGFjdGl2ZUNvc3RzKTtcbiAgICB9XG59XG4iXX0=